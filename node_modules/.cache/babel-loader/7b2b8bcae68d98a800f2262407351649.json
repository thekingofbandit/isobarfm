{"ast":null,"code":"import _defineProperty from \"/Users/i848465/personal/isobarfm/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_ALBUMS, SET_LOADING_ALBUMS, SET_ALBUMS_ERROR } from \"../actions/albums\";\nconst initialState = {\n  list: [],\n  byBand: {},\n  isLoading: false,\n  error: null\n};\n\nconst setAlbumsByBand = (albumList, bandID, albumIDs, byBand) => {\n  const albumsByBand = albumList.reduce((indexedAlbums, cur) => {\n    for (const albumID of albumIDs) {\n      if (albumID === cur.id) {\n        indexedAlbums.push(cur);\n      }\n    }\n\n    return indexedAlbums;\n  }, []);\n  const nbb = JSON.parse(JSON.stringify(byBand));\n  nbb[bandID] = albumsByBand;\n  return nbb;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALBUMS:\n      console.log(\"set albums\", action.value);\n      const byBand = setAlbumsByBand(action.value.albums, action.value.bandID, action.value.albumIDs, state.byBand);\n      return _objectSpread({}, state, {\n        list: action.value.albums,\n        byBand,\n        error: null\n      });\n\n    case SET_LOADING_ALBUMS:\n      return _objectSpread({}, state, {\n        isLoading: action.value\n      });\n\n    case SET_ALBUMS_ERROR:\n      return _objectSpread({}, state, {\n        list: [],\n        byBand: {},\n        error: action.error,\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/reducers/albums.js"],"names":["SET_ALBUMS","SET_LOADING_ALBUMS","SET_ALBUMS_ERROR","initialState","list","byBand","isLoading","error","setAlbumsByBand","albumList","bandID","albumIDs","albumsByBand","reduce","indexedAlbums","cur","albumID","id","push","nbb","JSON","parse","stringify","state","action","type","console","log","value","albums"],"mappings":";;;;;;AAAA,SACEA,UADF,EAEEC,kBAFF,EAGEC,gBAHF,QAIO,mBAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,MAAM,EAAE,EAFW;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;;AAOA,MAAMC,eAAe,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,EAA8BN,MAA9B,KAAyC;AAC/D,QAAMO,YAAY,GAAGH,SAAS,CAACI,MAAV,CAAiB,CAACC,aAAD,EAAgBC,GAAhB,KAAwB;AAC5D,SAAK,MAAMC,OAAX,IAAsBL,QAAtB,EAAgC;AAC9B,UAAIK,OAAO,KAAKD,GAAG,CAACE,EAApB,EAAwB;AACtBH,QAAAA,aAAa,CAACI,IAAd,CAAmBH,GAAnB;AACD;AACF;;AAED,WAAOD,aAAP;AACD,GARoB,EAQlB,EARkB,CAArB;AAUA,QAAMK,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAejB,MAAf,CAAX,CAAZ;AACAc,EAAAA,GAAG,CAACT,MAAD,CAAH,GAAcE,YAAd;AAEA,SAAOO,GAAP;AACD,CAfD;;AAiBA,gBAAe,CAACI,KAAK,GAAGpB,YAAT,EAAuBqB,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKzB,UAAL;AACE0B,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,MAAM,CAACI,KAAjC;AACA,YAAMvB,MAAM,GAAGG,eAAe,CAC5BgB,MAAM,CAACI,KAAP,CAAaC,MADe,EAE5BL,MAAM,CAACI,KAAP,CAAalB,MAFe,EAG5Bc,MAAM,CAACI,KAAP,CAAajB,QAHe,EAI5BY,KAAK,CAAClB,MAJsB,CAA9B;AAOA,+BACKkB,KADL;AAEEnB,QAAAA,IAAI,EAAEoB,MAAM,CAACI,KAAP,CAAaC,MAFrB;AAGExB,QAAAA,MAHF;AAIEE,QAAAA,KAAK,EAAE;AAJT;;AAMF,SAAKN,kBAAL;AACE,+BACKsB,KADL;AAEEjB,QAAAA,SAAS,EAAEkB,MAAM,CAACI;AAFpB;;AAIF,SAAK1B,gBAAL;AACE,+BACKqB,KADL;AAEEnB,QAAAA,IAAI,EAAE,EAFR;AAGEC,QAAAA,MAAM,EAAE,EAHV;AAIEE,QAAAA,KAAK,EAAEiB,MAAM,CAACjB,KAJhB;AAKED,QAAAA,SAAS,EAAE;AALb;;AAOF;AACE,aAAOiB,KAAP;AA9BJ;AAgCD,CAjCD","sourcesContent":["import {\n  SET_ALBUMS,\n  SET_LOADING_ALBUMS,\n  SET_ALBUMS_ERROR\n} from \"../actions/albums\";\n\nconst initialState = {\n  list: [],\n  byBand: {},\n  isLoading: false,\n  error: null\n};\n\nconst setAlbumsByBand = (albumList, bandID, albumIDs, byBand) => {\n  const albumsByBand = albumList.reduce((indexedAlbums, cur) => {\n    for (const albumID of albumIDs) {\n      if (albumID === cur.id) {\n        indexedAlbums.push(cur);\n      }\n    }\n\n    return indexedAlbums;\n  }, []);\n\n  const nbb = JSON.parse(JSON.stringify(byBand));\n  nbb[bandID] = albumsByBand;\n\n  return nbb;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_ALBUMS:\n      console.log(\"set albums\", action.value);\n      const byBand = setAlbumsByBand(\n        action.value.albums,\n        action.value.bandID,\n        action.value.albumIDs,\n        state.byBand\n      );\n\n      return {\n        ...state,\n        list: action.value.albums,\n        byBand,\n        error: null\n      };\n    case SET_LOADING_ALBUMS:\n      return {\n        ...state,\n        isLoading: action.value\n      };\n    case SET_ALBUMS_ERROR:\n      return {\n        ...state,\n        list: [],\n        byBand: {},\n        error: action.error,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}