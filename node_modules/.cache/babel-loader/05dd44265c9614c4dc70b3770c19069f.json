{"ast":null,"code":"var _jsxFileName = \"/Users/i848465/personal/isobarfm/src/components/BandPage/index.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport Loader from \"../Loader\";\nimport Album from \"../Album\";\nimport { useSelector } from \"react-redux\";\nimport useActions from \"../../hooks/useActions\";\nimport * as bandSelectors from \"../../selectors/selectedBand\";\nimport * as bandActions from \"../../actions/selectedBand\";\nimport * as albumSelectors from \"../../selectors/albums\";\nimport * as albumActions from \"../../actions/albums\";\n\nconst BandPage = ({\n  match\n}) => {\n  const id = match.params.id;\n  const selectedBand = useSelector(bandSelectors.getSelectedBand);\n  const isBandLoading = useSelector(bandSelectors.isSelectedBandLoading);\n  const albumsByBand = useSelector(albumSelectors.getAlbumsByBand);\n  const areAlbumsLoading = useSelector(albumSelectors.isAlbumListLoading);\n  const albumError = useSelector(albumSelectors.getError);\n  const fetchBandByID = useActions(bandActions.fetchBandByID);\n  const fetchAlbumsForBand = useActions(albumActions.fetchAlbumsForBand);\n  useEffect(() => {\n    console.log(id);\n    fetchBandByID();\n    fetchAlbumsForBand();\n  }, [fetchBandByID, fetchAlbumsForBand]);\n\n  const listAlbums = () => {\n    if (albumsByBand[selectedBand.id]) {\n      return albumsByBand[selectedBand.id].map(value => React.createElement(Album, Object.assign({\n        key: value.id\n      }, value, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })));\n    }\n\n    return [];\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, isBandLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Band\"), selectedBand.name), React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, areAlbumsLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Albums\"), albumError ? albumError.message : listAlbums())));\n};\n\nexport default BandPage;","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/components/BandPage/index.js"],"names":["React","Fragment","useEffect","Loader","Album","useSelector","useActions","bandSelectors","bandActions","albumSelectors","albumActions","BandPage","match","id","params","selectedBand","getSelectedBand","isBandLoading","isSelectedBandLoading","albumsByBand","getAlbumsByBand","areAlbumsLoading","isAlbumListLoading","albumError","getError","fetchBandByID","fetchAlbumsForBand","console","log","listAlbums","map","value","name","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,8BAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,4BAA7B;AAEA,OAAO,KAAKC,cAAZ,MAAgC,wBAAhC;AACA,OAAO,KAAKC,YAAZ,MAA8B,sBAA9B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9B,QAAMC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaD,EAAxB;AACA,QAAME,YAAY,GAAGV,WAAW,CAACE,aAAa,CAACS,eAAf,CAAhC;AACA,QAAMC,aAAa,GAAGZ,WAAW,CAACE,aAAa,CAACW,qBAAf,CAAjC;AAEA,QAAMC,YAAY,GAAGd,WAAW,CAACI,cAAc,CAACW,eAAhB,CAAhC;AACA,QAAMC,gBAAgB,GAAGhB,WAAW,CAACI,cAAc,CAACa,kBAAhB,CAApC;AACA,QAAMC,UAAU,GAAGlB,WAAW,CAACI,cAAc,CAACe,QAAhB,CAA9B;AAEA,QAAMC,aAAa,GAAGnB,UAAU,CAACE,WAAW,CAACiB,aAAb,CAAhC;AACA,QAAMC,kBAAkB,GAAGpB,UAAU,CAACI,YAAY,CAACgB,kBAAd,CAArC;AAEAxB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,OAAO,CAACC,GAAR,CAAYf,EAAZ;AACAY,IAAAA,aAAa;AACbC,IAAAA,kBAAkB;AACnB,GAJQ,EAIN,CAACD,aAAD,EAAgBC,kBAAhB,CAJM,CAAT;;AAMA,QAAMG,UAAU,GAAG,MAAM;AACvB,QAAIV,YAAY,CAACJ,YAAY,CAACF,EAAd,CAAhB,EAAmC;AACjC,aAAOM,YAAY,CAACJ,YAAY,CAACF,EAAd,CAAZ,CAA8BiB,GAA9B,CAAkCC,KAAK,IAC5C,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,KAAK,CAAClB;AAAlB,SAA0BkB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADK,CAAP;AAGD;;AACD,WAAO,EAAP;AACD,GAPD;;AASA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,aAAa,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADpB,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,YAAY,CAACiB,IAFhB,CAFF,EAME,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,gBAAgB,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADvB,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,UAAU,GAAGA,UAAU,CAACU,OAAd,GAAwBJ,UAAU,EAF/C,CAFF,CANF,CADF;AAgBD,CA3CD;;AA6CA,eAAelB,QAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\n\nimport Loader from \"../Loader\";\nimport Album from \"../Album\";\n\nimport { useSelector } from \"react-redux\";\nimport useActions from \"../../hooks/useActions\";\n\nimport * as bandSelectors from \"../../selectors/selectedBand\";\nimport * as bandActions from \"../../actions/selectedBand\";\n\nimport * as albumSelectors from \"../../selectors/albums\";\nimport * as albumActions from \"../../actions/albums\";\n\nconst BandPage = ({ match }) => {\n  const id = match.params.id;\n  const selectedBand = useSelector(bandSelectors.getSelectedBand);\n  const isBandLoading = useSelector(bandSelectors.isSelectedBandLoading);\n\n  const albumsByBand = useSelector(albumSelectors.getAlbumsByBand);\n  const areAlbumsLoading = useSelector(albumSelectors.isAlbumListLoading);\n  const albumError = useSelector(albumSelectors.getError);\n\n  const fetchBandByID = useActions(bandActions.fetchBandByID);\n  const fetchAlbumsForBand = useActions(albumActions.fetchAlbumsForBand);\n\n  useEffect(() => {\n    console.log(id);\n    fetchBandByID();\n    fetchAlbumsForBand();\n  }, [fetchBandByID, fetchAlbumsForBand]);\n\n  const listAlbums = () => {\n    if (albumsByBand[selectedBand.id]) {\n      return albumsByBand[selectedBand.id].map(value => (\n        <Album key={value.id} {...value}></Album>\n      ));\n    }\n    return [];\n  };\n\n  return (\n    <Fragment>\n      {isBandLoading && <Loader />}\n      <Fragment>\n        <h1>Band</h1>\n        {selectedBand.name}\n      </Fragment>\n      <Fragment>\n        {areAlbumsLoading && <Loader />}\n        <Fragment>\n          <h1>Albums</h1>\n          {albumError ? albumError.message : listAlbums()}\n        </Fragment>\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default BandPage;\n"]},"metadata":{},"sourceType":"module"}