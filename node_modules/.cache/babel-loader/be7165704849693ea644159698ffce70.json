{"ast":null,"code":"var _jsxFileName = \"/Users/i848465/personal/isobarfm/src/components/BandPage/index.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport Loader from \"../Loader\";\nimport { useSelector } from \"react-redux\";\nimport useActions from \"../../hooks/useActions\";\nimport * as bandSelectors from \"../../selectors/selectedBand\";\nimport * as bandActions from \"../../actions/selectedBand\";\nimport * as albumSelectors from \"../../selectors/albums\";\nimport * as albumActions from \"../../actions/albums\";\n\nconst BandPage = () => {\n  const selectedBand = useSelector(bandSelectors.getSelectedBand);\n  const isBandLoading = useSelector(bandSelectors.isSelectedBandLoading);\n  const getAlbumsByBand = useSelector(albumSelectors.getAlbumsByBand);\n  const areAlbumsLoading = useSelector(albumSelectors.isAlbumListLoading);\n  const fetchBandByID = useActions(bandActions.fetchBandByID);\n  const fetchAlbumsForBand = useActions(albumActions.fetchAlbumsForBand);\n  useEffect(() => {\n    fetchBandByID();\n    fetchAlbumsForBand();\n  }, [fetchBandByID, fetchAlbumsForBand]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, isBandLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Band\"), selectedBand.name, areAlbumsLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })));\n};\n\nexport default BandPage;","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/components/BandPage/index.js"],"names":["React","Fragment","useEffect","Loader","useSelector","useActions","bandSelectors","bandActions","albumSelectors","albumActions","BandPage","selectedBand","getSelectedBand","isBandLoading","isSelectedBandLoading","getAlbumsByBand","areAlbumsLoading","isAlbumListLoading","fetchBandByID","fetchAlbumsForBand","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,8BAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,4BAA7B;AAEA,OAAO,KAAKC,cAAZ,MAAgC,wBAAhC;AACA,OAAO,KAAKC,YAAZ,MAA8B,sBAA9B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,YAAY,GAAGP,WAAW,CAACE,aAAa,CAACM,eAAf,CAAhC;AACA,QAAMC,aAAa,GAAGT,WAAW,CAACE,aAAa,CAACQ,qBAAf,CAAjC;AAEA,QAAMC,eAAe,GAAGX,WAAW,CAACI,cAAc,CAACO,eAAhB,CAAnC;AACA,QAAMC,gBAAgB,GAAGZ,WAAW,CAACI,cAAc,CAACS,kBAAhB,CAApC;AAEA,QAAMC,aAAa,GAAGb,UAAU,CAACE,WAAW,CAACW,aAAb,CAAhC;AACA,QAAMC,kBAAkB,GAAGd,UAAU,CAACI,YAAY,CAACU,kBAAd,CAArC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,aAAa;AACbC,IAAAA,kBAAkB;AACnB,GAHQ,EAGN,CAACD,aAAD,EAAgBC,kBAAhB,CAHM,CAAT;AAKA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,aAAa,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADpB,EAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,YAAY,CAACS,IAFhB,EAGGJ,gBAAgB,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHvB,CAFF,CADF;AAUD,CAzBD;;AA2BA,eAAeN,QAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\n\nimport Loader from \"../Loader\";\n\nimport { useSelector } from \"react-redux\";\nimport useActions from \"../../hooks/useActions\";\n\nimport * as bandSelectors from \"../../selectors/selectedBand\";\nimport * as bandActions from \"../../actions/selectedBand\";\n\nimport * as albumSelectors from \"../../selectors/albums\";\nimport * as albumActions from \"../../actions/albums\";\n\nconst BandPage = () => {\n  const selectedBand = useSelector(bandSelectors.getSelectedBand);\n  const isBandLoading = useSelector(bandSelectors.isSelectedBandLoading);\n\n  const getAlbumsByBand = useSelector(albumSelectors.getAlbumsByBand);\n  const areAlbumsLoading = useSelector(albumSelectors.isAlbumListLoading);\n\n  const fetchBandByID = useActions(bandActions.fetchBandByID);\n  const fetchAlbumsForBand = useActions(albumActions.fetchAlbumsForBand);\n\n  useEffect(() => {\n    fetchBandByID();\n    fetchAlbumsForBand();\n  }, [fetchBandByID, fetchAlbumsForBand]);\n\n  return (\n    <Fragment>\n      {isBandLoading && <Loader />}\n      <Fragment>\n        <h1>Band</h1>\n        {selectedBand.name}\n        {areAlbumsLoading && <Loader />}\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default BandPage;\n"]},"metadata":{},"sourceType":"module"}