{"ast":null,"code":"import _slicedToArray from \"/Users/i848465/personal/heroes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/i848465/personal/heroes/src/components/ComicList/index.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport * as comicsAPI from '../../services/comics';\nimport Comic from '../Comic';\nimport { setComicListLoading } from '../../actions/loader';\nimport { connect } from 'react-redux';\n\nconst ComicList = ({\n  showLoader,\n  hideLoader\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        comics = _useState2[0],\n        setComics = _useState2[1];\n\n  useEffect(() => {\n    showLoader();\n\n    let comics = (async () => {\n      (await comicsAPI.list()).data.data.results;\n    })();\n\n    setComics(comics);\n    hideLoader();\n    return () => {\n      console.log('component unmounting');\n    };\n  }, [showLoader, hideLoader]);\n\n  const listComics = () => comics.map(value => React.createElement(Comic, Object.assign({\n    key: value.id\n  }, value, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  })));\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Comics\"), \" \", listComics());\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showLoader: () => dispatch(setComicListLoading(true)),\n    hideLoader: () => dispatch(setComicListLoading(false))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ComicList);","map":{"version":3,"sources":["/Users/i848465/personal/heroes/src/components/ComicList/index.js"],"names":["React","Fragment","useState","useEffect","comicsAPI","Comic","setComicListLoading","connect","ComicList","showLoader","hideLoader","comics","setComics","list","data","results","console","log","listComics","map","value","id","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AAEA,OAAO,KAAKC,SAAZ,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAgC;AAAA,oBACpBR,QAAQ,CAAC,EAAD,CADY;AAAA;AAAA,QACzCS,MADyC;AAAA,QACjCC,SADiC;;AAGhDT,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU;;AAEV,QAAIE,MAAM,GAAG,CAAC,YAAY;AACxB,OAAC,MAAMP,SAAS,CAACS,IAAV,EAAP,EAAyBC,IAAzB,CAA8BA,IAA9B,CAAmCC,OAAnC;AACD,KAFY,GAAb;;AAGAH,IAAAA,SAAS,CAACD,MAAD,CAAT;AAEAD,IAAAA,UAAU;AAEV,WAAO,MAAM;AACXM,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,KAFD;AAGD,GAbQ,EAaN,CAACR,UAAD,EAAaC,UAAb,CAbM,CAAT;;AAeA,QAAMQ,UAAU,GAAG,MACjBP,MAAM,CAACQ,GAAP,CAAWC,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACC;AAAlB,KAA0BD,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB,CADF;;AAGA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,OACmBF,UAAU,EAD7B,CADF;AAKD,CA1BD;;AA4BA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLd,IAAAA,UAAU,EAAE,MAAMc,QAAQ,CAACjB,mBAAmB,CAAC,IAAD,CAApB,CADrB;AAELI,IAAAA,UAAU,EAAE,MAAMa,QAAQ,CAACjB,mBAAmB,CAAC,KAAD,CAApB;AAFrB,GAAP;AAID,CALD;;AAOA,eAAeC,OAAO,CACpB,IADoB,EAEpBe,kBAFoB,CAAP,CAGbd,SAHa,CAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\n\nimport * as comicsAPI from '../../services/comics';\nimport Comic from '../Comic';\nimport { setComicListLoading } from '../../actions/loader';\nimport { connect } from 'react-redux';\n\nconst ComicList = ({ showLoader, hideLoader }) => {\n  const [comics, setComics] = useState([]);\n\n  useEffect(() => {\n    showLoader();\n\n    let comics = (async () => {\n      (await comicsAPI.list()).data.data.results;\n    })();\n    setComics(comics);\n\n    hideLoader();\n\n    return () => {\n      console.log('component unmounting');\n    };\n  }, [showLoader, hideLoader]);\n\n  const listComics = () =>\n    comics.map(value => <Comic key={value.id} {...value} />);\n\n  return (\n    <Fragment>\n      <h1>Comics</h1> {listComics()}\n    </Fragment>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showLoader: () => dispatch(setComicListLoading(true)),\n    hideLoader: () => dispatch(setComicListLoading(false)),\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ComicList);\n"]},"metadata":{},"sourceType":"module"}