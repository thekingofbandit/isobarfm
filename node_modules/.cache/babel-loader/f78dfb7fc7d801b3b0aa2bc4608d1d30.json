{"ast":null,"code":"import * as albumsAPI from \"../services/bands\";\nexport const fetchAlbumsForBand = ({\n  bandID,\n  bandAlbums\n}) => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n    const state = getState();\n\n    if (bandID && bandAlbums) {\n      let albums = state.albums.list;\n\n      if (!albums) {\n        albumsAPI.list().then(response => {\n          albums = response.data;\n          dispatch(setAlbums(albums));\n        }).catch(err => {\n          dispatch(setAlbumsError(err));\n        });\n      }\n\n      dispatch(setLoadingAlbums(false));\n    }\n  };\n};\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return {\n    type: SET_ALBUMS,\n    value: albums\n  };\n};\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return {\n    type: SET_LOADING_ALBUMS,\n    value: isLoading\n  };\n};\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return {\n    type: SET_ALBUMS_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/actions/albums.js"],"names":["albumsAPI","fetchAlbumsForBand","bandID","bandAlbums","dispatch","getState","setLoadingAlbums","state","albums","list","then","response","data","setAlbums","catch","err","setAlbumsError","SET_ALBUMS","type","value","SET_LOADING_ALBUMS","isLoading","SET_ALBUMS_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,mBAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA4B;AAC5D,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;;AAEA,QAAIH,MAAM,IAAIC,UAAd,EAA0B;AACxB,UAAIK,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,IAA1B;;AACA,UAAI,CAACD,MAAL,EAAa;AACXR,QAAAA,SAAS,CACNS,IADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBH,UAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAlB;AACAR,UAAAA,QAAQ,CAACS,SAAS,CAACL,MAAD,CAAV,CAAR;AACD,SALH,EAMGM,KANH,CAMSC,GAAG,IAAI;AACZX,UAAAA,QAAQ,CAACY,cAAc,CAACD,GAAD,CAAf,CAAR;AACD,SARH;AASD;;AAEDX,MAAAA,QAAQ,CAACE,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD;AACF,GArBD;AAsBD,CAvBM;AAyBP,OAAO,MAAMW,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMJ,SAAS,GAAGL,MAAM,IAAI;AACjC,SAAO;AAAEU,IAAAA,IAAI,EAAED,UAAR;AAAoBE,IAAAA,KAAK,EAAEX;AAA3B,GAAP;AACD,CAFM;AAIP,OAAO,MAAMY,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMd,gBAAgB,GAAGe,SAAS,IAAI;AAC3C,SAAO;AAAEH,IAAAA,IAAI,EAAEE,kBAAR;AAA4BD,IAAAA,KAAK,EAAEE;AAAnC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMN,cAAc,GAAGO,KAAK,IAAI;AACrC,SAAO;AAAEL,IAAAA,IAAI,EAAEI,gBAAR;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAFM","sourcesContent":["import * as albumsAPI from \"../services/bands\";\n\nexport const fetchAlbumsForBand = ({ bandID, bandAlbums }) => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n\n    const state = getState();\n\n    if (bandID && bandAlbums) {\n      let albums = state.albums.list;\n      if (!albums) {\n        albumsAPI\n          .list()\n          .then(response => {\n            albums = response.data;\n            dispatch(setAlbums(albums));\n          })\n          .catch(err => {\n            dispatch(setAlbumsError(err));\n          });\n      }\n\n      dispatch(setLoadingAlbums(false));\n    }\n  };\n};\n\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return { type: SET_ALBUMS, value: albums };\n};\n\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return { type: SET_LOADING_ALBUMS, value: isLoading };\n};\n\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return { type: SET_ALBUMS_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}