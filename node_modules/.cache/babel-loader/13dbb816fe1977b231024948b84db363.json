{"ast":null,"code":"import * as comicsAPI from '../services/comics';\nimport { setLoader } from './loader';\nexport const getComics = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n    dispatch(setComicListLoading(true));\n    dispatch(setLoader(true));\n    comicsAPI.list().then(data => {\n      const comics = data.data.data.results;\n      dispatch(setComics(comics));\n      dispatch(setComicListLoading(false));\n\n      if (!state.heroes.isLoading) {\n        dispatch(setLoader(false));\n      }\n    }).catch(err => {\n      dispatch(setHeroesError(err));\n      dispatch(setComicListLoading(false)); // deveria ser no reducer, mas ficou aqui porque o loeader é global e o erro é local\n    });\n  };\n};\nexport const SET_COMICS = 'SET_COMICS';\nexport const setComics = comics => {\n  return {\n    type: SET_COMICS,\n    value: comics\n  };\n};\nexport const SET_COMIC_LIST_LOADING = 'SET_COMIC_LIST_LOADING';\nexport const setComicListLoading = isLoading => {\n  return {\n    type: SET_COMIC_LIST_LOADING,\n    value: isLoading\n  };\n};\nexport const SET_COMICS_ERROR = 'SET_COMICS_ERROR';\nexport const setHeroesError = error => {\n  return {\n    type: SET_COMICS_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/heroes/src/actions/comics.js"],"names":["comicsAPI","setLoader","getComics","dispatch","getState","state","setComicListLoading","list","then","data","comics","results","setComics","heroes","isLoading","catch","err","setHeroesError","SET_COMICS","type","value","SET_COMIC_LIST_LOADING","SET_COMICS_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,oBAA3B;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B,UAAMC,KAAK,GAAGD,QAAQ,EAAtB;AACAD,IAAAA,QAAQ,CAACG,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACAH,IAAAA,QAAQ,CAACF,SAAS,CAAC,IAAD,CAAV,CAAR;AAEAD,IAAAA,SAAS,CACNO,IADH,GAEGC,IAFH,CAEQC,IAAI,IAAI;AACZ,YAAMC,MAAM,GAAGD,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeE,OAA9B;AACAR,MAAAA,QAAQ,CAACS,SAAS,CAACF,MAAD,CAAV,CAAR;AAEAP,MAAAA,QAAQ,CAACG,mBAAmB,CAAC,KAAD,CAApB,CAAR;;AACA,UAAI,CAACD,KAAK,CAACQ,MAAN,CAAaC,SAAlB,EAA6B;AAC3BX,QAAAA,QAAQ,CAACF,SAAS,CAAC,KAAD,CAAV,CAAR;AACD;AACF,KAVH,EAWGc,KAXH,CAWSC,GAAG,IAAI;AACZb,MAAAA,QAAQ,CAACc,cAAc,CAACD,GAAD,CAAf,CAAR;AACAb,MAAAA,QAAQ,CAACG,mBAAmB,CAAC,KAAD,CAApB,CAAR,CAFY,CAE0B;AACvC,KAdH;AAeD,GApBD;AAqBD,CAtBM;AAwBP,OAAO,MAAMY,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMN,SAAS,GAAGF,MAAM,IAAI;AACjC,SAAO;AAAES,IAAAA,IAAI,EAAED,UAAR;AAAoBE,IAAAA,KAAK,EAAEV;AAA3B,GAAP;AACD,CAFM;AAIP,OAAO,MAAMW,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMf,mBAAmB,GAAGQ,SAAS,IAAI;AAC9C,SAAO;AAAEK,IAAAA,IAAI,EAAEE,sBAAR;AAAgCD,IAAAA,KAAK,EAAEN;AAAvC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMQ,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAML,cAAc,GAAGM,KAAK,IAAI;AACrC,SAAO;AAAEJ,IAAAA,IAAI,EAAEG,gBAAR;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAFM","sourcesContent":["import * as comicsAPI from '../services/comics';\nimport { setLoader } from './loader';\n\nexport const getComics = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n    dispatch(setComicListLoading(true));\n    dispatch(setLoader(true));\n\n    comicsAPI\n      .list()\n      .then(data => {\n        const comics = data.data.data.results;\n        dispatch(setComics(comics));\n\n        dispatch(setComicListLoading(false));\n        if (!state.heroes.isLoading) {\n          dispatch(setLoader(false));\n        }\n      })\n      .catch(err => {\n        dispatch(setHeroesError(err));\n        dispatch(setComicListLoading(false)); // deveria ser no reducer, mas ficou aqui porque o loeader é global e o erro é local\n      });\n  };\n};\n\nexport const SET_COMICS = 'SET_COMICS';\nexport const setComics = comics => {\n  return { type: SET_COMICS, value: comics };\n};\n\nexport const SET_COMIC_LIST_LOADING = 'SET_COMIC_LIST_LOADING';\nexport const setComicListLoading = isLoading => {\n  return { type: SET_COMIC_LIST_LOADING, value: isLoading };\n};\n\nexport const SET_COMICS_ERROR = 'SET_COMICS_ERROR';\nexport const setHeroesError = error => {\n  return { type: SET_COMICS_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}