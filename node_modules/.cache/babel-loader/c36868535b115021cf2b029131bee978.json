{"ast":null,"code":"import _defineProperty from \"/Users/i848465/personal/heroes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_BOARD, SET_WINNER, SET_X_TURN } from '../actions/tictactoe';\nconst initialState = {\n  board: Array(9),\n  winner: null,\n  xTurn: true\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return _objectSpread({}, state, {\n        list: action.value,\n        error: null\n      });\n\n    case SET_WINNER:\n      return _objectSpread({}, state, {\n        isLoading: action.value\n      });\n\n    case SET_X_TURN:\n      return _objectSpread({}, state, {\n        list: [],\n        error: action.error,\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/i848465/personal/heroes/src/reducers/tictactoe.js"],"names":["SET_BOARD","SET_WINNER","SET_X_TURN","initialState","board","Array","winner","xTurn","state","action","type","list","value","error","isLoading"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,QAAkD,sBAAlD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CADO;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,SAAL;AACE,+BACKQ,KADL;AAEEG,QAAAA,IAAI,EAAEF,MAAM,CAACG,KAFf;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAKF,SAAKZ,UAAL;AACE,+BACKO,KADL;AAEEM,QAAAA,SAAS,EAAEL,MAAM,CAACG;AAFpB;;AAIF,SAAKV,UAAL;AACE,+BACKM,KADL;AAEEG,QAAAA,IAAI,EAAE,EAFR;AAGEE,QAAAA,KAAK,EAAEJ,MAAM,CAACI,KAHhB;AAIEC,QAAAA,SAAS,EAAE;AAJb;;AAMF;AACE,aAAON,KAAP;AApBJ;AAsBD,CAvBD","sourcesContent":["import { SET_BOARD, SET_WINNER, SET_X_TURN } from '../actions/tictactoe';\n\nconst initialState = {\n  board: Array(9),\n  winner: null,\n  xTurn: true,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return {\n        ...state,\n        list: action.value,\n        error: null,\n      };\n    case SET_WINNER:\n      return {\n        ...state,\n        isLoading: action.value,\n      };\n    case SET_X_TURN:\n      return {\n        ...state,\n        list: [],\n        error: action.error,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}