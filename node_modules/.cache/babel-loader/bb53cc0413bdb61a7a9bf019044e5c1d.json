{"ast":null,"code":"import * as albumsAPI from \"../services/bands\";\nexport const fetchAlbumsForBand = () => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n    const state = getState();\n    const bandID = state.selectedBand.band.id;\n    const bandAlbums = state.selectedBand.band.albums;\n\n    if (bandID && bandAlbums) {\n      let albums = state.albums.list;\n\n      if (!albums) {\n        albumsAPI.list().then(response => {\n          albums = response.data;\n          dispatch(setAlbums(albums));\n        }).catch(err => {\n          dispatch(setAlbumsError(err));\n        });\n      }\n\n      console.log(\"setting albums by band\", albums, bandAlbums);\n      const albumsByBand = albums.reduce((indexedAlbums, cur) => {\n        console.log(\"current\", cur);\n\n        for (const albumID of bandAlbums) {\n          if (albumID === cur.id) {\n            indexedAlbums[bandID] = cur;\n          }\n        }\n\n        return indexedAlbums;\n      }, {});\n      dispatch(setAlbumsByBand(albumsByBand));\n      dispatch(setLoadingAlbums(false));\n    }\n  };\n};\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return {\n    type: SET_ALBUMS,\n    value: albums\n  };\n};\nexport const SET_ALBUMS_BY_BAND = \"SET_ALBUMS_BY_BAND\";\nexport const setAlbumsByBand = albums => {\n  return {\n    type: SET_ALBUMS_BY_BAND,\n    value: albums\n  };\n};\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return {\n    type: SET_LOADING_ALBUMS,\n    value: isLoading\n  };\n};\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return {\n    type: SET_ALBUMS_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/actions/albums.js"],"names":["albumsAPI","fetchAlbumsForBand","dispatch","getState","setLoadingAlbums","state","bandID","selectedBand","band","id","bandAlbums","albums","list","then","response","data","setAlbums","catch","err","setAlbumsError","console","log","albumsByBand","reduce","indexedAlbums","cur","albumID","setAlbumsByBand","SET_ALBUMS","type","value","SET_ALBUMS_BY_BAND","SET_LOADING_ALBUMS","isLoading","SET_ALBUMS_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,mBAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACtC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,UAAMG,MAAM,GAAGD,KAAK,CAACE,YAAN,CAAmBC,IAAnB,CAAwBC,EAAvC;AACA,UAAMC,UAAU,GAAGL,KAAK,CAACE,YAAN,CAAmBC,IAAnB,CAAwBG,MAA3C;;AAEA,QAAIL,MAAM,IAAII,UAAd,EAA0B;AACxB,UAAIC,MAAM,GAAGN,KAAK,CAACM,MAAN,CAAaC,IAA1B;;AACA,UAAI,CAACD,MAAL,EAAa;AACXX,QAAAA,SAAS,CACNY,IADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBH,UAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAlB;AACAb,UAAAA,QAAQ,CAACc,SAAS,CAACL,MAAD,CAAV,CAAR;AACD,SALH,EAMGM,KANH,CAMSC,GAAG,IAAI;AACZhB,UAAAA,QAAQ,CAACiB,cAAc,CAACD,GAAD,CAAf,CAAR;AACD,SARH;AASD;;AAEDE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCV,MAAtC,EAA8CD,UAA9C;AAEA,YAAMY,YAAY,GAAGX,MAAM,CAACY,MAAP,CAAc,CAACC,aAAD,EAAgBC,GAAhB,KAAwB;AACzDL,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,GAAvB;;AACA,aAAK,MAAMC,OAAX,IAAsBhB,UAAtB,EAAkC;AAChC,cAAIgB,OAAO,KAAKD,GAAG,CAAChB,EAApB,EAAwB;AACtBe,YAAAA,aAAa,CAAClB,MAAD,CAAb,GAAwBmB,GAAxB;AACD;AACF;;AAED,eAAOD,aAAP;AACD,OAToB,EASlB,EATkB,CAArB;AAWAtB,MAAAA,QAAQ,CAACyB,eAAe,CAACL,YAAD,CAAhB,CAAR;AACApB,MAAAA,QAAQ,CAACE,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD;AACF,GArCD;AAsCD,CAvCM;AAyCP,OAAO,MAAMwB,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMZ,SAAS,GAAGL,MAAM,IAAI;AACjC,SAAO;AAAEkB,IAAAA,IAAI,EAAED,UAAR;AAAoBE,IAAAA,KAAK,EAAEnB;AAA3B,GAAP;AACD,CAFM;AAIP,OAAO,MAAMoB,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMJ,eAAe,GAAGhB,MAAM,IAAI;AACvC,SAAO;AAAEkB,IAAAA,IAAI,EAAEE,kBAAR;AAA4BD,IAAAA,KAAK,EAAEnB;AAAnC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMqB,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAM5B,gBAAgB,GAAG6B,SAAS,IAAI;AAC3C,SAAO;AAAEJ,IAAAA,IAAI,EAAEG,kBAAR;AAA4BF,IAAAA,KAAK,EAAEG;AAAnC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMf,cAAc,GAAGgB,KAAK,IAAI;AACrC,SAAO;AAAEN,IAAAA,IAAI,EAAEK,gBAAR;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAFM","sourcesContent":["import * as albumsAPI from \"../services/bands\";\n\nexport const fetchAlbumsForBand = () => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n\n    const state = getState();\n    const bandID = state.selectedBand.band.id;\n    const bandAlbums = state.selectedBand.band.albums;\n\n    if (bandID && bandAlbums) {\n      let albums = state.albums.list;\n      if (!albums) {\n        albumsAPI\n          .list()\n          .then(response => {\n            albums = response.data;\n            dispatch(setAlbums(albums));\n          })\n          .catch(err => {\n            dispatch(setAlbumsError(err));\n          });\n      }\n\n      console.log(\"setting albums by band\", albums, bandAlbums);\n\n      const albumsByBand = albums.reduce((indexedAlbums, cur) => {\n        console.log(\"current\", cur);\n        for (const albumID of bandAlbums) {\n          if (albumID === cur.id) {\n            indexedAlbums[bandID] = cur;\n          }\n        }\n\n        return indexedAlbums;\n      }, {});\n\n      dispatch(setAlbumsByBand(albumsByBand));\n      dispatch(setLoadingAlbums(false));\n    }\n  };\n};\n\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return { type: SET_ALBUMS, value: albums };\n};\n\nexport const SET_ALBUMS_BY_BAND = \"SET_ALBUMS_BY_BAND\";\nexport const setAlbumsByBand = albums => {\n  return { type: SET_ALBUMS_BY_BAND, value: albums };\n};\n\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return { type: SET_LOADING_ALBUMS, value: isLoading };\n};\n\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return { type: SET_ALBUMS_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}