{"ast":null,"code":"import _defineProperty from \"/Users/i848465/personal/heroes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/i848465/personal/heroes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_BOARD } from '../actions/tictactoe';\nconst initialState = {\n  board: Array(9),\n  winner: null,\n  xTurn: true\n};\n\nconst getWinner = board => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return board[a];\n    }\n  }\n\n  return null;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return _objectSpread({}, state, {\n        board: action.value,\n        xTurn: !state.xTurn,\n        winner: getWinner(state.board)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/i848465/personal/heroes/src/reducers/tictactoe.js"],"names":["SET_BOARD","initialState","board","Array","winner","xTurn","getWinner","lines","i","length","a","b","c","state","action","type","value"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CADO;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,SAAS,GAAGJ,KAAK,IAAI;AACzB,QAAMK,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAA,oCACnBD,KAAK,CAACC,CAAD,CADc;AAAA,UAC9BE,CAD8B;AAAA,UAC3BC,CAD2B;AAAA,UACxBC,CADwB;;AAErC,QAAIV,KAAK,CAACQ,CAAD,CAAL,IAAYR,KAAK,CAACQ,CAAD,CAAL,KAAaR,KAAK,CAACS,CAAD,CAA9B,IAAqCT,KAAK,CAACQ,CAAD,CAAL,KAAaR,KAAK,CAACU,CAAD,CAA3D,EAAgE;AAC9D,aAAOV,KAAK,CAACQ,CAAD,CAAZ;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAlBD;;AAoBA,gBAAe,CAACG,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,SAAL;AACE,+BACKa,KADL;AAEEX,QAAAA,KAAK,EAAEY,MAAM,CAACE,KAFhB;AAGEX,QAAAA,KAAK,EAAE,CAACQ,KAAK,CAACR,KAHhB;AAIED,QAAAA,MAAM,EAAEE,SAAS,CAACO,KAAK,CAACX,KAAP;AAJnB;;AAMF;AACE,aAAOW,KAAP;AATJ;AAWD,CAZD","sourcesContent":["import { SET_BOARD } from '../actions/tictactoe';\n\nconst initialState = {\n  board: Array(9),\n  winner: null,\n  xTurn: true,\n};\n\nconst getWinner = board => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return board[a];\n    }\n  }\n  return null;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return {\n        ...state,\n        board: action.value,\n        xTurn: !state.xTurn,\n        winner: getWinner(state.board),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}