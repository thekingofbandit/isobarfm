{"ast":null,"code":"import * as bandsAPI from \"../services/bands\";\nimport * as albumActions from \"./albums\";\nexport const fetchBandByID = id => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingSelectedBand(true));\n    const state = getState();\n\n    if (state.bands.list) {\n      const band = state.bands.list.find(band => band.id === id);\n\n      if (band) {\n        dispatch(setSelectedBand(band));\n        dispatch(setLoadingSelectedBand(false));\n      }\n    }\n\n    bandsAPI.bandByID(id).then(response => {\n      const band = response.data;\n      dispatch(setSelectedBand(band));\n      dispatch(albumActions.fetchAlbumsForBand(band));\n      dispatch(setLoadingSelectedBand(false));\n    }).catch(err => {\n      dispatch(setSelectedBandError(err));\n    });\n  };\n};\nexport const SET_SELECTED_BAND = \"SET_SELECTED_BAND\";\nexport const setSelectedBand = selectedBand => {\n  return {\n    type: SET_SELECTED_BAND,\n    value: selectedBand\n  };\n};\nexport const SET_SELECTED_BAND_ID = \"SET_SELECTED_BAND_ID\";\nexport const setSelectedBandID = id => {\n  return {\n    type: SET_SELECTED_BAND_ID,\n    value: id\n  };\n};\nexport const SET_LOADING_SELECTED_BAND = \"SET_LOADING_SELECTED_BAND\";\nexport const setLoadingSelectedBand = isLoading => {\n  return {\n    type: SET_LOADING_SELECTED_BAND,\n    value: isLoading\n  };\n};\nexport const SET_SELECTED_BAND_ERROR = \"SET_SELECTED_BAND_ERROR\";\nexport const setSelectedBandError = error => {\n  return {\n    type: SET_SELECTED_BAND_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/actions/selectedBand.js"],"names":["bandsAPI","albumActions","fetchBandByID","id","dispatch","getState","setLoadingSelectedBand","state","bands","list","band","find","setSelectedBand","bandByID","then","response","data","fetchAlbumsForBand","catch","err","setSelectedBandError","SET_SELECTED_BAND","selectedBand","type","value","SET_SELECTED_BAND_ID","setSelectedBandID","SET_LOADING_SELECTED_BAND","isLoading","SET_SELECTED_BAND_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AAEA,OAAO,KAAKC,YAAZ,MAA8B,UAA9B;AAEA,OAAO,MAAMC,aAAa,GAAGC,EAAE,IAAI;AACjC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAACE,sBAAsB,CAAC,IAAD,CAAvB,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;;AAEA,QAAIE,KAAK,CAACC,KAAN,CAAYC,IAAhB,EAAsB;AACpB,YAAMC,IAAI,GAAGH,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBE,IAAjB,CAAsBD,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYA,EAA1C,CAAb;;AACA,UAAIO,IAAJ,EAAU;AACRN,QAAAA,QAAQ,CAACQ,eAAe,CAACF,IAAD,CAAhB,CAAR;AAEAN,QAAAA,QAAQ,CAACE,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACD;AACF;;AAEDN,IAAAA,QAAQ,CACLa,QADH,CACYV,EADZ,EAEGW,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAML,IAAI,GAAGK,QAAQ,CAACC,IAAtB;AACAZ,MAAAA,QAAQ,CAACQ,eAAe,CAACF,IAAD,CAAhB,CAAR;AACAN,MAAAA,QAAQ,CAACH,YAAY,CAACgB,kBAAb,CAAgCP,IAAhC,CAAD,CAAR;AAEAN,MAAAA,QAAQ,CAACE,sBAAsB,CAAC,KAAD,CAAvB,CAAR;AACD,KARH,EASGY,KATH,CASSC,GAAG,IAAI;AACZf,MAAAA,QAAQ,CAACgB,oBAAoB,CAACD,GAAD,CAArB,CAAR;AACD,KAXH;AAYD,GA1BD;AA2BD,CA5BM;AA8BP,OAAO,MAAME,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMT,eAAe,GAAGU,YAAY,IAAI;AAC7C,SAAO;AAAEC,IAAAA,IAAI,EAAEF,iBAAR;AAA2BG,IAAAA,KAAK,EAAEF;AAAlC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMG,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,iBAAiB,GAAGvB,EAAE,IAAI;AACrC,SAAO;AAAEoB,IAAAA,IAAI,EAAEE,oBAAR;AAA8BD,IAAAA,KAAK,EAAErB;AAArC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMwB,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMrB,sBAAsB,GAAGsB,SAAS,IAAI;AACjD,SAAO;AAAEL,IAAAA,IAAI,EAAEI,yBAAR;AAAmCH,IAAAA,KAAK,EAAEI;AAA1C,GAAP;AACD,CAFM;AAIP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMT,oBAAoB,GAAGU,KAAK,IAAI;AAC3C,SAAO;AAAEP,IAAAA,IAAI,EAAEM,uBAAR;AAAiCC,IAAAA;AAAjC,GAAP;AACD,CAFM","sourcesContent":["import * as bandsAPI from \"../services/bands\";\n\nimport * as albumActions from \"./albums\";\n\nexport const fetchBandByID = id => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingSelectedBand(true));\n\n    const state = getState();\n\n    if (state.bands.list) {\n      const band = state.bands.list.find(band => band.id === id);\n      if (band) {\n        dispatch(setSelectedBand(band));\n\n        dispatch(setLoadingSelectedBand(false));\n      }\n    }\n\n    bandsAPI\n      .bandByID(id)\n      .then(response => {\n        const band = response.data;\n        dispatch(setSelectedBand(band));\n        dispatch(albumActions.fetchAlbumsForBand(band));\n\n        dispatch(setLoadingSelectedBand(false));\n      })\n      .catch(err => {\n        dispatch(setSelectedBandError(err));\n      });\n  };\n};\n\nexport const SET_SELECTED_BAND = \"SET_SELECTED_BAND\";\nexport const setSelectedBand = selectedBand => {\n  return { type: SET_SELECTED_BAND, value: selectedBand };\n};\n\nexport const SET_SELECTED_BAND_ID = \"SET_SELECTED_BAND_ID\";\nexport const setSelectedBandID = id => {\n  return { type: SET_SELECTED_BAND_ID, value: id };\n};\n\nexport const SET_LOADING_SELECTED_BAND = \"SET_LOADING_SELECTED_BAND\";\nexport const setLoadingSelectedBand = isLoading => {\n  return { type: SET_LOADING_SELECTED_BAND, value: isLoading };\n};\n\nexport const SET_SELECTED_BAND_ERROR = \"SET_SELECTED_BAND_ERROR\";\nexport const setSelectedBandError = error => {\n  return { type: SET_SELECTED_BAND_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}