{"ast":null,"code":"import * as albumsAPI from \"../services/albums\";\nexport const fetchAlbumsForBand = band => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n    const state = getState();\n\n    if (state.albums.list.length === 0) {\n      albumsAPI.list().then(response => {\n        const albums = response.data;\n        dispatch(setAlbums({\n          albums,\n          id\n        }));\n      }).catch(err => {\n        dispatch(setAlbumsError(err));\n      });\n    }\n\n    dispatch(setLoadingAlbums(false));\n  };\n};\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = ({\n  albums,\n  id\n}) => {\n  return {\n    type: SET_ALBUMS,\n    value: {\n      albums,\n      id\n    }\n  };\n};\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return {\n    type: SET_LOADING_ALBUMS,\n    value: isLoading\n  };\n};\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return {\n    type: SET_ALBUMS_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/actions/albums.js"],"names":["albumsAPI","fetchAlbumsForBand","band","dispatch","getState","setLoadingAlbums","state","albums","list","length","then","response","data","setAlbums","id","catch","err","setAlbumsError","SET_ALBUMS","type","value","SET_LOADING_ALBUMS","isLoading","SET_ALBUMS_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,oBAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;AACxC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;;AAEA,QAAIE,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAClCT,MAAAA,SAAS,CACNQ,IADH,GAEGE,IAFH,CAEQC,QAAQ,IAAI;AAChB,cAAMJ,MAAM,GAAGI,QAAQ,CAACC,IAAxB;AACAT,QAAAA,QAAQ,CAACU,SAAS,CAAC;AAAEN,UAAAA,MAAF;AAAUO,UAAAA;AAAV,SAAD,CAAV,CAAR;AACD,OALH,EAMGC,KANH,CAMSC,GAAG,IAAI;AACZb,QAAAA,QAAQ,CAACc,cAAc,CAACD,GAAD,CAAf,CAAR;AACD,OARH;AASD;;AAEDb,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,MAAMa,UAAU,GAAG,YAAnB;AACP,OAAO,MAAML,SAAS,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUO,EAAAA;AAAV,CAAD,KAAoB;AAC3C,SAAO;AAAEK,IAAAA,IAAI,EAAED,UAAR;AAAoBE,IAAAA,KAAK,EAAE;AAAEb,MAAAA,MAAF;AAAUO,MAAAA;AAAV;AAA3B,GAAP;AACD,CAFM;AAIP,OAAO,MAAMO,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMhB,gBAAgB,GAAGiB,SAAS,IAAI;AAC3C,SAAO;AAAEH,IAAAA,IAAI,EAAEE,kBAAR;AAA4BD,IAAAA,KAAK,EAAEE;AAAnC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMN,cAAc,GAAGO,KAAK,IAAI;AACrC,SAAO;AAAEL,IAAAA,IAAI,EAAEI,gBAAR;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAFM","sourcesContent":["import * as albumsAPI from \"../services/albums\";\n\nexport const fetchAlbumsForBand = band => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n\n    const state = getState();\n\n    if (state.albums.list.length === 0) {\n      albumsAPI\n        .list()\n        .then(response => {\n          const albums = response.data;\n          dispatch(setAlbums({ albums, id }));\n        })\n        .catch(err => {\n          dispatch(setAlbumsError(err));\n        });\n    }\n\n    dispatch(setLoadingAlbums(false));\n  };\n};\n\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = ({ albums, id }) => {\n  return { type: SET_ALBUMS, value: { albums, id } };\n};\n\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return { type: SET_LOADING_ALBUMS, value: isLoading };\n};\n\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return { type: SET_ALBUMS_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}