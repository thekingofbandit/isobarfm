{"ast":null,"code":"import * as albumsAPI from \"../services/bands\";\nexport const fetchAlbumsForBand = () => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n    const state = getState();\n    const bandID = state.selectedBand.band.id;\n    const bandAlbums = state.selectedBand.band.albums;\n    let albums = state.albums.list;\n\n    if (!albums) {\n      albumsAPI.list().then(response => {\n        albums = response.data;\n        dispatch(setAlbums(albums));\n      }).catch(err => {\n        dispatch(setAlbumsError(err));\n      });\n    }\n\n    const albumsByBand = albums.reduce((indexedAlbums, cur) => {\n      for (const albumID of bandAlbums) {\n        if (albumID === cur.id) {\n          indexedAlbums[bandID] = cur;\n        }\n      }\n\n      return indexedAlbums;\n    }, {});\n  };\n};\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return {\n    type: SET_ALBUMS,\n    value: albums\n  };\n};\nexport const SET_ALBUMS_BY_BAND = \"SET_ALBUMS_BY_BAND\";\nexport const setAlbumsByBand = albums => {\n  return {\n    type: SET_ALBUMS_BY_BAND,\n    value: albums\n  };\n};\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return {\n    type: SET_LOADING_ALBUMS,\n    value: isLoading\n  };\n}; // export const SET_LOADING_ALBUMS_FOR_BAND = \"SET_LOADING_ALBUMS_FOR_BAND\";\n// export const setLoadingAlbumsForBand = isLoading => {\n//   return { type: SET_LOADING_ALBUMS_FOR_BAND, value: isLoading };\n// };\n\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return {\n    type: SET_ALBUMS_ERROR,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/i848465/personal/isobarfm/src/actions/albums.js"],"names":["albumsAPI","fetchAlbumsForBand","dispatch","getState","setLoadingAlbums","state","bandID","selectedBand","band","id","bandAlbums","albums","list","then","response","data","setAlbums","catch","err","setAlbumsError","albumsByBand","reduce","indexedAlbums","cur","albumID","SET_ALBUMS","type","value","SET_ALBUMS_BY_BAND","setAlbumsByBand","SET_LOADING_ALBUMS","isLoading","SET_ALBUMS_ERROR","error"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,mBAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACtC,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BD,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAEA,UAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,UAAMG,MAAM,GAAGD,KAAK,CAACE,YAAN,CAAmBC,IAAnB,CAAwBC,EAAvC;AACA,UAAMC,UAAU,GAAGL,KAAK,CAACE,YAAN,CAAmBC,IAAnB,CAAwBG,MAA3C;AAEA,QAAIA,MAAM,GAAGN,KAAK,CAACM,MAAN,CAAaC,IAA1B;;AACA,QAAI,CAACD,MAAL,EAAa;AACXX,MAAAA,SAAS,CACNY,IADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBH,QAAAA,MAAM,GAAGG,QAAQ,CAACC,IAAlB;AACAb,QAAAA,QAAQ,CAACc,SAAS,CAACL,MAAD,CAAV,CAAR;AACD,OALH,EAMGM,KANH,CAMSC,GAAG,IAAI;AACZhB,QAAAA,QAAQ,CAACiB,cAAc,CAACD,GAAD,CAAf,CAAR;AACD,OARH;AASD;;AAED,UAAME,YAAY,GAAGT,MAAM,CAACU,MAAP,CAAc,CAACC,aAAD,EAAgBC,GAAhB,KAAwB;AACzD,WAAK,MAAMC,OAAX,IAAsBd,UAAtB,EAAkC;AAChC,YAAIc,OAAO,KAAKD,GAAG,CAACd,EAApB,EAAwB;AACtBa,UAAAA,aAAa,CAAChB,MAAD,CAAb,GAAwBiB,GAAxB;AACD;AACF;;AAED,aAAOD,aAAP;AACD,KARoB,EAQlB,EARkB,CAArB;AASD,GA7BD;AA8BD,CA/BM;AAiCP,OAAO,MAAMG,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMT,SAAS,GAAGL,MAAM,IAAI;AACjC,SAAO;AAAEe,IAAAA,IAAI,EAAED,UAAR;AAAoBE,IAAAA,KAAK,EAAEhB;AAA3B,GAAP;AACD,CAFM;AAIP,OAAO,MAAMiB,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,eAAe,GAAGlB,MAAM,IAAI;AACvC,SAAO;AAAEe,IAAAA,IAAI,EAAEE,kBAAR;AAA4BD,IAAAA,KAAK,EAAEhB;AAAnC,GAAP;AACD,CAFM;AAIP,OAAO,MAAMmB,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAM1B,gBAAgB,GAAG2B,SAAS,IAAI;AAC3C,SAAO;AAAEL,IAAAA,IAAI,EAAEI,kBAAR;AAA4BH,IAAAA,KAAK,EAAEI;AAAnC,GAAP;AACD,CAFM,C,CAIP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMb,cAAc,GAAGc,KAAK,IAAI;AACrC,SAAO;AAAEP,IAAAA,IAAI,EAAEM,gBAAR;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAFM","sourcesContent":["import * as albumsAPI from \"../services/bands\";\n\nexport const fetchAlbumsForBand = () => {\n  return (dispatch, getState) => {\n    dispatch(setLoadingAlbums(true));\n\n    const state = getState();\n    const bandID = state.selectedBand.band.id;\n    const bandAlbums = state.selectedBand.band.albums;\n\n    let albums = state.albums.list;\n    if (!albums) {\n      albumsAPI\n        .list()\n        .then(response => {\n          albums = response.data;\n          dispatch(setAlbums(albums));\n        })\n        .catch(err => {\n          dispatch(setAlbumsError(err));\n        });\n    }\n\n    const albumsByBand = albums.reduce((indexedAlbums, cur) => {\n      for (const albumID of bandAlbums) {\n        if (albumID === cur.id) {\n          indexedAlbums[bandID] = cur;\n        }\n      }\n\n      return indexedAlbums;\n    }, {});\n  };\n};\n\nexport const SET_ALBUMS = \"SET_ALBUMS\";\nexport const setAlbums = albums => {\n  return { type: SET_ALBUMS, value: albums };\n};\n\nexport const SET_ALBUMS_BY_BAND = \"SET_ALBUMS_BY_BAND\";\nexport const setAlbumsByBand = albums => {\n  return { type: SET_ALBUMS_BY_BAND, value: albums };\n};\n\nexport const SET_LOADING_ALBUMS = \"SET_LOADING_ALBUMS\";\nexport const setLoadingAlbums = isLoading => {\n  return { type: SET_LOADING_ALBUMS, value: isLoading };\n};\n\n// export const SET_LOADING_ALBUMS_FOR_BAND = \"SET_LOADING_ALBUMS_FOR_BAND\";\n// export const setLoadingAlbumsForBand = isLoading => {\n//   return { type: SET_LOADING_ALBUMS_FOR_BAND, value: isLoading };\n// };\n\nexport const SET_ALBUMS_ERROR = \"SET_ALBUMS_ERROR\";\nexport const setAlbumsError = error => {\n  return { type: SET_ALBUMS_ERROR, error };\n};\n"]},"metadata":{},"sourceType":"module"}